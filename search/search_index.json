{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Adobe Commerce Developer Professional Certification Course","text":"<p>Welcome to the Adobe Commerce Developer Professional Certification Course. This course is designed to help you prepare for the AD0-E717 exam and excel as an Adobe Commerce (Magento) developer.</p>"},{"location":"#course-overview","title":"Course Overview","text":"<ul> <li>Objective: Equip you with the knowledge and practical skills needed to pass the AD0-E717 exam.</li> <li>Methodology: Each module includes theoretical concepts, practical exercises, and examples to facilitate hands-on learning.</li> </ul>"},{"location":"#modules","title":"Modules","text":"<ul> <li>Module 1: Introduction to Adobe Commerce and Magento Architecture</li> <li>Module 2: Magento Module Development</li> <li>Module 3: Working with Database and Models</li> <li>Module 4: EAV Model and Attribute Management</li> <li>Module 5: Frontend Development and Theming</li> <li>Module 6: JavaScript Customizations</li> <li>Module 7: Routing and Controllers</li> <li>Module 8: Plugins and Dependency Injection</li> <li>Module 9: Working with Cron Jobs</li> <li>Module 10: Cloud Environment Management</li> <li>Module 11: Security and Compliance</li> <li>Module 12: Testing and Troubleshooting</li> <li>Module 13: Final Review and Exam Preparation</li> </ul> <p>Let's dive into the modules and start your journey toward certification!</p> <p>Get Started &gt;&gt;</p>"},{"location":"modules/exam-preparation/","title":"Exam Preparation","text":""},{"location":"modules/exam-preparation/#study-tips","title":"Study Tips","text":"<ul> <li>Hands-On Practice: Set up a local development environment and practice building custom modules.</li> <li>Review Official Materials: Regularly refer to Magento DevDocs for detailed explanations.</li> <li>Sample Questions: Work through sample questions and past exam papers.</li> <li>Time Management: Simulate exam conditions by timing your practice sessions.</li> </ul>"},{"location":"modules/exam-preparation/#key-topics-to-review","title":"Key Topics to Review","text":"<ul> <li>Magento Architecture and Concepts</li> <li>Module and Theme Development</li> <li>Database Schema and EAV Model</li> <li>Dependency Injection and Plugins</li> <li>Frontend Customization and UI Components</li> <li>Magento Cloud Environment</li> </ul> <p>Back to Home</p>"},{"location":"modules/module1/","title":"Module 1: Introduction to Adobe Commerce and Magento Architecture","text":""},{"location":"modules/module1/#overview","title":"Overview","text":""},{"location":"modules/module1/#objectives","title":"Objectives","text":"<ul> <li>Understand the Adobe Commerce (Magento 2) architecture.</li> <li>Familiarize yourself with the environment structure and project setup.</li> </ul>"},{"location":"modules/module1/#11-understanding-adobe-commerce-and-magento-2","title":"1.1 Understanding Adobe Commerce and Magento 2","text":""},{"location":"modules/module1/#study","title":"Study","text":"<ul> <li> <p>Overview of Adobe Commerce (Magento 2):</p> </li> <li> <p>Adobe Commerce is an enterprise-level e-commerce platform providing advanced features like B2B functionality, scalability, and robust security.</p> </li> <li> <p>It supports both on-premise and cloud deployments, offering flexibility to merchants.</p> </li> <li> <p>Differences between Magento Open Source and Adobe Commerce:</p> </li> <li> <p>Adobe Commerce:</p> <ul> <li>Additional Features:</li> <li>Page Builder: A drag-and-drop content management tool.</li> <li>Customer Segmentation: Personalized shopping experiences.</li> <li>Advanced Reporting: In-depth analytics and reporting tools.</li> <li>B2B Functionality: Company accounts, quotes, and shared catalogs.</li> <li>Support and Security:</li> <li>Regular updates and patches with dedicated support.</li> <li>Enhanced security features and compliance standards.</li> </ul> </li> <li> <p>Magento Open Source:</p> <ul> <li>A free version with essential e-commerce functionalities.</li> <li>Community-driven support and limited features compared to Adobe Commerce.</li> </ul> </li> <li> <p>Magento Directory Structure:</p> </li> </ul> <p><code>bash   magento/   \u251c\u2500\u2500 app/   \u2502   \u251c\u2500\u2500 code/   \u2502   \u251c\u2500\u2500 design/   \u2502   \u251c\u2500\u2500 etc/   \u251c\u2500\u2500 bin/   \u251c\u2500\u2500 dev/   \u251c\u2500\u2500 generated/   \u251c\u2500\u2500 lib/   \u251c\u2500\u2500 pub/   \u2502   \u251c\u2500\u2500 static/   \u2502   \u2514\u2500\u2500 media/   \u251c\u2500\u2500 var/   \u2514\u2500\u2500 vendor/</code></p>"},{"location":"modules/module10/","title":"Module 10: Cloud Environment Management","text":""},{"location":"modules/module10/#overview","title":"Overview","text":""},{"location":"modules/module10/#objectives","title":"Objectives","text":"<ul> <li>Understand Adobe Commerce Cloud architecture.</li> <li>Learn how to manage environments using the Cloud CLI.</li> <li>Configure environment variables and settings.</li> <li>Best practices for cloud deployment and scaling.</li> </ul>"},{"location":"modules/module10/#101-understanding-adobe-commerce-cloud-architecture","title":"10.1 Understanding Adobe Commerce Cloud Architecture","text":""},{"location":"modules/module10/#study","title":"Study","text":"<ul> <li> <p>Environments:</p> </li> <li> <p>Integration: Development environments.</p> </li> <li>Staging: Pre-production testing.</li> <li> <p>Production: Live site.</p> </li> <li> <p>Cloud Features:</p> </li> <li> <p>Read-only file system for consistency.</p> </li> <li>Automated build and deploy processes.</li> <li> <p>Scalable infrastructure.</p> </li> <li> <p>Configuration Files:</p> </li> <li> <p><code>.magento.app.yaml</code>: Application configuration.</p> </li> <li><code>.magento.env.yaml</code>: Environment-specific overrides.</li> <li><code>.magento/routes.yaml</code>: Routing configuration.</li> </ul>"},{"location":"modules/module10/#example","title":"Example","text":"<ul> <li> <p>Environment Hierarchy:</p> </li> <li> <p><code>master</code> (Production)</p> <ul> <li><code>staging</code> (Staging)</li> <li><code>develop</code> (Integration)<ul> <li>Feature branches</li> </ul> </li> </ul> </li> </ul>"},{"location":"modules/module10/#102-using-the-cloud-cli-for-environment-management","title":"10.2 Using the Cloud CLI for Environment Management","text":""},{"location":"modules/module10/#study_1","title":"Study","text":"<ul> <li> <p>Cloud CLI Installation:</p> </li> <li> <p>Install using Composer:</p> <pre><code>composer require --dev magento/magento-cloud-cli\n</code></pre> </li> <li> <p>Common Commands:</p> </li> <li> <p>List Environments:</p> <pre><code>magento-cloud environment:list\n</code></pre> </li> <li> <p>Create a New Branch:</p> <pre><code>magento-cloud environment:branch new-feature\n</code></pre> </li> <li> <p>SSH into Environment:</p> <pre><code>magento-cloud ssh\n</code></pre> </li> <li> <p>Set Environment Variables:</p> <pre><code>magento-cloud variable:set VARIABLE_NAME value\n</code></pre> </li> </ul>"},{"location":"modules/module10/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Create a new environment for development and deploy changes.</p>"},{"location":"modules/module10/#steps","title":"Steps:","text":"<ol> <li>Create a New Branch Environment:</li> </ol> <pre><code>magento-cloud environment:branch new-feature\n</code></pre> <ol> <li>Push Code to the New Environment:</li> </ol> <pre><code>git checkout -b new-feature\n# Make code changes\ngit add .\ngit commit -m \"Implement new feature\"\ngit push origin new-feature\n</code></pre> <ol> <li> <p>Deploy the Environment:</p> </li> <li> <p>The push triggers a build and deployment on the cloud.</p> </li> <li> <p>Manage Environment Variables:</p> </li> <li> <p>Set a configuration variable:</p> <pre><code>magento-cloud variable:set --level environment CONFIG_VAR value\n</code></pre> </li> <li> <p>Access the Environment:</p> </li> <li> <p>View the URL provided by the cloud.</p> </li> <li>Use <code>magento-cloud ssh</code> to connect if needed.</li> </ol>"},{"location":"modules/module10/#outcome","title":"Outcome","text":"<ul> <li>Learned how to use the Cloud CLI for environment management.</li> <li>Created and managed a new development environment.</li> </ul>"},{"location":"modules/module10/#103-configuring-environment-variables-and-settings","title":"10.3 Configuring Environment Variables and Settings","text":""},{"location":"modules/module10/#study_2","title":"Study","text":"<ul> <li> <p>Types of Variables:</p> </li> <li> <p>Project Variables: Apply to all environments.</p> </li> <li> <p>Environment Variables: Specific to an environment.</p> </li> <li> <p>Sensitive Data:</p> </li> <li> <p>Store sensitive configurations securely.</p> </li> <li>Use <code>RELATIONSHIPS</code> to access services like databases.</li> </ul>"},{"location":"modules/module10/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Add a sensitive configuration value to an environment.</p>"},{"location":"modules/module10/#steps_1","title":"Steps:","text":"<ol> <li>Set an Environment-Specific Variable:</li> </ol> <pre><code>magento-cloud variable:set --level environment API_KEY your_api_key\n</code></pre> <ol> <li>Access the Variable in Code:</li> </ol> <pre><code>$apiKey = getenv('API_KEY');\n</code></pre> <ol> <li> <p>Avoid Committing Sensitive Data:</p> </li> <li> <p>Ensure that <code>env.php</code> and other sensitive files are not committed to version control.</p> </li> </ol>"},{"location":"modules/module10/#outcome_1","title":"Outcome","text":"<ul> <li>Managed environment-specific configurations securely.</li> <li>Understood best practices for handling sensitive data in the cloud.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module11/","title":"Module 11: Security and Compliance","text":""},{"location":"modules/module11/#overview","title":"Overview","text":""},{"location":"modules/module11/#objectives","title":"Objectives","text":"<ul> <li>Understand security best practices in Magento.</li> <li>Learn how to manage sensitive configurations.</li> <li>Implement secure coding standards.</li> <li>Learn about user roles and access control.</li> <li>Understand how to apply patches and updates.</li> </ul>"},{"location":"modules/module11/#111-implementing-security-best-practices","title":"11.1 Implementing Security Best Practices","text":""},{"location":"modules/module11/#study","title":"Study","text":"<ul> <li> <p>Data Sanitization and Validation:</p> </li> <li> <p>Always validate and sanitize user inputs.</p> </li> <li>Use Magento's built-in data validation methods.</li> <li> <p>Prevent SQL injection, XSS, and CSRF attacks.</p> </li> <li> <p>Avoid Direct Database Access:</p> </li> <li> <p>Use Magento's ORM (Models and Resource Models).</p> </li> <li> <p>Avoid writing raw SQL queries.</p> </li> <li> <p>Secure Coding Standards:</p> </li> <li> <p>Follow Magento's coding standards.</p> </li> <li>Use proper exception handling.</li> <li> <p>Avoid exposing sensitive information in error messages.</p> </li> <li> <p>Use Nonce and Form Keys:</p> </li> <li> <p>Utilize form keys to prevent CSRF attacks in forms.</p> </li> <li>Use <code>$this-&gt;formKey-&gt;getFormKey();</code> to generate a form key.</li> </ul>"},{"location":"modules/module11/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Secure a custom form with form keys to prevent CSRF attacks.</p>"},{"location":"modules/module11/#steps","title":"Steps:","text":"<ol> <li>Inject FormKey in Controller:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Controller/Index/Form.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Controller\\Index;\n\nuse Magento\\Framework\\App\\Action\\Action;\nuse Magento\\Framework\\App\\Action\\Context;\nuse Magento\\Framework\\Data\\Form\\FormKey\\Validator;\n\nclass Form extends Action\n{\n    protected $formKeyValidator;\n\n    public function __construct(\n        Context $context,\n        Validator $formKeyValidator\n    ) {\n        $this-&gt;formKeyValidator = $formKeyValidator;\n        parent::__construct($context);\n    }\n\n    public function execute()\n    {\n        if (!$this-&gt;formKeyValidator-&gt;validate($this-&gt;getRequest())) {\n            // Invalid form key\n            $this-&gt;messageManager-&gt;addErrorMessage('Invalid Form Key');\n            return $this-&gt;_redirect('*/*/index');\n        }\n\n        // Process form data\n    }\n}\n</code></pre> <ol> <li>Add Form Key to Form:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/view/frontend/templates/form.phtml</code></p> <pre><code>&lt;form action=\"&lt;?php echo $block-&gt;getFormAction(); ?&gt;\" method=\"post\"&gt;\n    &lt;?php echo $block-&gt;getFormKeyHtml(); ?&gt;\n    &lt;!-- Form fields --&gt;\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <ol> <li> <p>Test the Form:</p> </li> <li> <p>Submit the form with and without the form key.</p> </li> <li>Ensure that submissions without a valid form key are rejected.</li> </ol>"},{"location":"modules/module11/#outcome","title":"Outcome","text":"<ul> <li>Implemented security measures to protect against CSRF attacks.</li> <li>Gained understanding of secure coding practices in Magento.</li> </ul>"},{"location":"modules/module11/#112-managing-sensitive-configurations","title":"11.2 Managing Sensitive Configurations","text":""},{"location":"modules/module11/#study_1","title":"Study","text":"<ul> <li> <p>Storing Sensitive Data Securely:</p> </li> <li> <p>Use environment variables for sensitive data.</p> </li> <li> <p>Do not hardcode API keys or passwords in code.</p> </li> <li> <p>Using the <code>app/etc/env.php</code> File:</p> </li> <li> <p>Contains database credentials and other sensitive configurations.</p> </li> <li> <p>Should not be tracked in version control (e.g., Git).</p> </li> <li> <p>Configuration Management:</p> </li> <li> <p>Use <code>config.php</code> for system configuration that can be tracked.</p> </li> <li>Use <code>env.php</code> for environment-specific and sensitive settings.</li> </ul>"},{"location":"modules/module11/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Securely store and access a third-party API key.</p>"},{"location":"modules/module11/#steps_1","title":"Steps:","text":"<ol> <li> <p>Set Environment Variable:</p> </li> <li> <p>In Adobe Commerce Cloud:</p> <pre><code>magento-cloud variable:set --level environment API_KEY your_api_key\n</code></pre> </li> <li> <p>In local development, set the environment variable in your server or IDE.</p> </li> <li> <p>Access the API Key in Code:</p> </li> </ol> <pre><code>$apiKey = getenv('API_KEY');\n</code></pre> <ol> <li> <p>Use the API Key:</p> </li> <li> <p>When making API requests, include the <code>$apiKey</code> securely.</p> </li> <li> <p>Ensure <code>env.php</code> Is Not in Version Control:</p> </li> <li> <p>Check <code>.gitignore</code> to confirm <code>app/etc/env.php</code> is ignored.</p> </li> </ol>"},{"location":"modules/module11/#outcome_1","title":"Outcome","text":"<ul> <li>Learned how to manage sensitive configurations securely.</li> <li>Avoided exposing sensitive data in code repositories.</li> </ul>"},{"location":"modules/module11/#113-user-roles-and-access-control","title":"11.3 User Roles and Access Control","text":""},{"location":"modules/module11/#study_2","title":"Study","text":"<ul> <li> <p>Admin User Roles and Permissions:</p> </li> <li> <p>Define custom user roles with specific permissions.</p> </li> <li> <p>Use ACL to control access to resources.</p> </li> <li> <p>Creating Custom Roles:</p> </li> <li> <p>Navigate to System &gt; Permissions &gt; User Roles.</p> </li> <li> <p>Create a new role and assign relevant resources.</p> </li> <li> <p>Assigning Roles to Users:</p> </li> <li> <p>Navigate to System &gt; Permissions &gt; All Users.</p> </li> <li>Assign the custom role to a user account.</li> </ul>"},{"location":"modules/module11/#practical-exercise_2","title":"Practical Exercise","text":"<p>Task: Create a custom admin role for content editors.</p>"},{"location":"modules/module11/#steps_2","title":"Steps:","text":"<ol> <li> <p>Create a New Role:</p> </li> <li> <p>Go to System &gt; Permissions &gt; User Roles.</p> </li> <li>Click Add New Role.</li> <li>Role Information:<ul> <li>Role Name: Content Editor</li> <li>Your Password: [Enter your admin password]</li> </ul> </li> <li> <p>Role Resources:</p> <ul> <li>Select Custom.</li> <li>Expand Content.</li> <li>Check permissions for Pages, Blocks, Media.</li> </ul> </li> <li> <p>Create a New User:</p> </li> <li> <p>Go to System &gt; Permissions &gt; All Users.</p> </li> <li>Click Add New User.</li> <li>Fill in user information.</li> <li> <p>Assign the Content Editor role.</p> </li> <li> <p>Test the User Account:</p> </li> <li> <p>Log in with the new user credentials.</p> </li> <li>Verify that only the permitted sections are accessible.</li> </ol>"},{"location":"modules/module11/#outcome_2","title":"Outcome","text":"<ul> <li>Successfully created a custom admin role with restricted permissions.</li> <li>Improved security by following the principle of least privilege.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module12/","title":"Module 12: Testing and Troubleshooting","text":""},{"location":"modules/module12/#overview","title":"Overview","text":""},{"location":"modules/module12/#objectives","title":"Objectives","text":"<ul> <li>Learn how to use Magento's logging and debugging tools.</li> <li>Understand how to troubleshoot common issues.</li> <li>Learn about Magento's testing frameworks.</li> <li>Implement unit tests and integration tests.</li> <li>Use Xdebug for step debugging.</li> </ul>"},{"location":"modules/module12/#121-utilizing-logging-and-reports","title":"12.1 Utilizing Logging and Reports","text":""},{"location":"modules/module12/#study","title":"Study","text":"<ul> <li> <p>Magento Logging System:</p> </li> <li> <p>Uses Monolog library.</p> </li> <li> <p>Logs are stored in <code>var/log/</code>.</p> </li> <li> <p>Common Log Files:</p> </li> <li> <p><code>system.log</code>: General system messages.</p> </li> <li> <p><code>exception.log</code>: Captures exceptions.</p> </li> <li> <p>Enabling Developer Mode:</p> </li> <li> <p>Provides detailed error messages.</p> </li> <li> <p>Enable with:</p> <pre><code>bin/magento deploy:mode:set developer\n</code></pre> </li> <li> <p>Custom Logging:</p> </li> <li> <p>Use <code>Psr\\Log\\LoggerInterface</code> to log custom messages.</p> </li> </ul>"},{"location":"modules/module12/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Add custom logging to a module and analyze log files.</p>"},{"location":"modules/module12/#steps","title":"Steps:","text":"<ol> <li>Inject Logger into a Class:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Model/Example.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Model;\n\nuse Psr\\Log\\LoggerInterface;\n\nclass Example\n{\n    protected $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this-&gt;logger = $logger;\n    }\n\n    public function execute()\n    {\n        $this-&gt;logger-&gt;info('HelloWorld Example executed.');\n    }\n}\n</code></pre> <ol> <li> <p>Trigger the Logging:</p> </li> <li> <p>Call the <code>execute</code> method of the <code>Example</code> class.</p> </li> <li> <p>Check the Log Files:</p> </li> <li> <p>Open <code>var/log/system.log</code>.</p> </li> <li> <p>Look for the logged message.</p> </li> <li> <p>Analyze Errors:</p> </li> <li> <p>Intentionally introduce an error (e.g., incorrect class name).</p> </li> <li>Check <code>var/log/exception.log</code> for the stack trace.</li> </ol>"},{"location":"modules/module12/#outcome","title":"Outcome","text":"<ul> <li>Learned how to log custom messages.</li> <li>Gained experience in analyzing log files to troubleshoot issues.</li> </ul>"},{"location":"modules/module12/#122-writing-unit-tests","title":"12.2 Writing Unit Tests","text":""},{"location":"modules/module12/#study_1","title":"Study","text":"<ul> <li> <p>Magento Testing Frameworks:</p> </li> <li> <p>PHPUnit: For unit testing.</p> </li> <li> <p>Magento Functional Testing Framework (MFTF): For functional tests.</p> </li> <li> <p>Unit Testing Best Practices:</p> </li> <li> <p>Test individual units of code in isolation.</p> </li> <li> <p>Use mocks and stubs as needed.</p> </li> <li> <p>Test Directory Structure:</p> </li> <li> <p>Place tests in <code>app/code/Vendor/Module/Test/Unit/</code>.</p> </li> </ul>"},{"location":"modules/module12/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Write a unit test for a simple model method.</p>"},{"location":"modules/module12/#steps_1","title":"Steps:","text":"<ol> <li>Create the Class to Test:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Model/Calculator.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Model;\n\nclass Calculator\n{\n    public function add($a, $b)\n    {\n        return $a + $b;\n    }\n}\n</code></pre> <ol> <li> <p>Set Up PHPUnit Configuration:</p> </li> <li> <p>Use the provided <code>phpunit.xml.dist</code> in Magento root directory.</p> </li> <li> <p>Ensure PHPUnit is installed.</p> </li> <li> <p>Write the Unit Test:</p> </li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Test/Unit/Model/CalculatorTest.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Test\\Unit\\Model;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Vendor\\HelloWorld\\Model\\Calculator;\n\nclass CalculatorTest extends TestCase\n{\n    public function testAdd()\n    {\n        $calculator = new Calculator();\n        $this-&gt;assertEquals(5, $calculator-&gt;add(2, 3));\n    }\n}\n</code></pre> <ol> <li>Run the Test:</li> </ol> <pre><code>vendor/bin/phpunit -c dev/tests/unit/phpunit.xml.dist app/code/Vendor/HelloWorld/Test/Unit/Model/CalculatorTest.php\n</code></pre> <ol> <li> <p>Verify Test Results:</p> </li> <li> <p>Test should pass if the <code>add</code> method functions correctly.</p> </li> </ol>"},{"location":"modules/module12/#outcome_1","title":"Outcome","text":"<ul> <li>Learned how to write and run unit tests.</li> <li>Understood the importance of automated testing.</li> </ul>"},{"location":"modules/module12/#123-using-xdebug-for-step-debugging","title":"12.3 Using Xdebug for Step Debugging","text":""},{"location":"modules/module12/#study_2","title":"Study","text":"<ul> <li> <p>What is Xdebug:</p> </li> <li> <p>A PHP extension that provides debugging and profiling capabilities.</p> </li> <li> <p>Allows you to set breakpoints and step through code.</p> </li> <li> <p>Setting Up Xdebug:</p> </li> <li> <p>Install Xdebug extension for PHP.</p> </li> <li> <p>Configure <code>php.ini</code> with Xdebug settings.</p> </li> <li> <p>Integrating with IDE:</p> </li> <li> <p>Popular IDEs like PhpStorm support Xdebug.</p> </li> <li>Configure the IDE to listen for Xdebug connections.</li> </ul>"},{"location":"modules/module12/#practical-exercise_2","title":"Practical Exercise","text":"<p>Task: Debug a Magento module using Xdebug.</p>"},{"location":"modules/module12/#steps_2","title":"Steps:","text":"<ol> <li> <p>Install Xdebug:</p> </li> <li> <p>Follow installation instructions for your PHP version.</p> </li> <li> <p>Configure <code>php.ini</code>:</p> </li> </ol> <pre><code>[Xdebug]\nzend_extension=\"xdebug.so\"\nxdebug.mode=debug\nxdebug.start_with_request=yes\nxdebug.client_host=127.0.0.1\nxdebug.client_port=9003\n</code></pre> <ol> <li> <p>Set Up IDE:</p> </li> <li> <p>In PhpStorm, enable listening for PHP Debug connections.</p> </li> <li> <p>Set up a server configuration matching your Magento environment.</p> </li> <li> <p>Set Breakpoints:</p> </li> <li> <p>Open the PHP class you want to debug.</p> </li> <li> <p>Click in the margin to set breakpoints.</p> </li> <li> <p>Trigger the Debug Session:</p> </li> <li> <p>Access the relevant page or execute the code that invokes the class.</p> </li> <li> <p>The IDE should stop at the breakpoint.</p> </li> <li> <p>Step Through Code:</p> </li> <li> <p>Use the debug controls to step over, into, or out of code.</p> </li> <li>Inspect variables and stack traces.</li> </ol>"},{"location":"modules/module12/#outcome_2","title":"Outcome","text":"<ul> <li>Set up and used Xdebug to debug Magento code.</li> <li>Improved ability to troubleshoot complex issues.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module13/","title":"Module 13: Final Review and Exam Preparation","text":""},{"location":"modules/module13/#overview","title":"Overview","text":""},{"location":"modules/module13/#objectives","title":"Objectives","text":"<ul> <li>Consolidate knowledge from all modules.</li> <li>Identify areas requiring further study.</li> <li>Practice with sample questions.</li> <li>Prepare effectively for the certification exam.</li> </ul>"},{"location":"modules/module13/#131-reviewing-key-concepts","title":"13.1 Reviewing Key Concepts","text":""},{"location":"modules/module13/#study","title":"Study","text":"<ul> <li> <p>Revisit Each Module:</p> </li> <li> <p>Go through Modules 1 to 12.</p> </li> <li> <p>Ensure understanding of key concepts and practical exercises.</p> </li> <li> <p>Create Summaries:</p> </li> <li> <p>Write brief summaries of each topic.</p> </li> <li> <p>Focus on areas you found challenging.</p> </li> <li> <p>Discussion and Teaching:</p> </li> <li> <p>Explain concepts to a peer or even to yourself.</p> </li> <li>Teaching is an effective way to reinforce learning.</li> </ul>"},{"location":"modules/module13/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Create flashcards for important topics.</p>"},{"location":"modules/module13/#steps","title":"Steps:","text":"<ol> <li> <p>Identify Key Topics:</p> </li> <li> <p>For example:</p> <ul> <li>Dependency Injection</li> <li>Plugins vs. Observers</li> <li>EAV Model</li> <li>Magento Directory Structure</li> <li>Security Best Practices</li> </ul> </li> <li> <p>Create Flashcards:</p> </li> <li> <p>Use physical index cards or a digital tool like Anki.</p> </li> <li> <p>Write the concept on one side and explanation on the other.</p> </li> <li> <p>Review Regularly:</p> </li> <li> <p>Go through the flashcards daily.</p> </li> <li>Focus more on cards you find difficult.</li> </ol>"},{"location":"modules/module13/#outcome","title":"Outcome","text":"<ul> <li>Improved recall of essential concepts.</li> <li>Identified topics needing further review.</li> </ul>"},{"location":"modules/module13/#132-practicing-with-sample-questions","title":"13.2 Practicing with Sample Questions","text":""},{"location":"modules/module13/#study_1","title":"Study","text":"<ul> <li> <p>Understand the Exam Format:</p> </li> <li> <p>Multiple-choice questions.</p> </li> <li> <p>Time-limited (e.g., 60 minutes for 72 questions).</p> </li> <li> <p>Common Question Types:</p> </li> <li> <p>Code interpretation.</p> </li> <li>Best practice identification.</li> <li>Scenario-based problem-solving.</li> </ul>"},{"location":"modules/module13/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Attempt sample exam questions.</p>"},{"location":"modules/module13/#steps_1","title":"Steps:","text":"<ol> <li> <p>Find Sample Questions:</p> </li> <li> <p>Refer to official study guides.</p> </li> <li> <p>Use practice tests if available.</p> </li> <li> <p>Simulate Exam Conditions:</p> </li> <li> <p>Set a timer.</p> </li> <li> <p>Avoid distractions.</p> </li> <li> <p>Review Answers:</p> </li> <li> <p>Check explanations for correct answers.</p> </li> <li> <p>Understand why other options are incorrect.</p> </li> <li> <p>Identify Weak Areas:</p> </li> <li> <p>Note questions you answered incorrectly.</p> </li> <li>Revisit those topics in your studies.</li> </ol>"},{"location":"modules/module13/#outcome_1","title":"Outcome","text":"<ul> <li>Familiarized yourself with the exam style.</li> <li>Improved time management skills.</li> <li>Identified areas needing improvement.</li> </ul>"},{"location":"modules/module13/#133-exam-day-preparation","title":"13.3 Exam Day Preparation","text":""},{"location":"modules/module13/#study_2","title":"Study","text":"<ul> <li> <p>Logistics:</p> </li> <li> <p>Confirm exam time and location (or online access).</p> </li> <li> <p>Ensure identification documents are ready.</p> </li> <li> <p>Mental and Physical Preparation:</p> </li> <li> <p>Get adequate rest the night before.</p> </li> <li> <p>Eat a healthy meal prior to the exam.</p> </li> <li> <p>During the Exam:</p> </li> <li> <p>Read questions carefully.</p> </li> <li>Manage your time; don't spend too long on one question.</li> <li>If unsure, eliminate obviously wrong answers first.</li> </ul>"},{"location":"modules/module13/#practical-exercise_2","title":"Practical Exercise","text":"<p>Task: Develop an exam strategy plan.</p>"},{"location":"modules/module13/#steps_2","title":"Steps:","text":"<ol> <li> <p>Plan Time Allocation:</p> </li> <li> <p>For example, aim to spend no more than 50 seconds per question.</p> </li> <li> <p>Stress Management Techniques:</p> </li> <li> <p>Practice deep breathing.</p> </li> <li> <p>Stay positive and confident.</p> </li> <li> <p>Post-Exam Review:</p> </li> <li> <p>Regardless of the outcome, plan to review your performance.</p> </li> <li>Identify areas for future improvement.</li> </ol>"},{"location":"modules/module13/#outcome_2","title":"Outcome","text":"<ul> <li>Prepared a personal strategy for exam success.</li> <li>Ready to approach the examination with confidence.</li> </ul>"},{"location":"modules/module13/#conclusion","title":"Conclusion","text":"<p>Congratulations on completing the Adobe Commerce Developer Professional Certification Course! You have covered:</p> <ul> <li>Magento architecture and module development.</li> <li>Frontend and backend customization.</li> <li>Security best practices.</li> <li>Cloud environment management.</li> <li>Testing and troubleshooting techniques.</li> </ul> <p>With thorough preparation, practical experience, and a solid understanding of the concepts, you're well on your way to passing the AD0-E717 exam.</p>"},{"location":"modules/module2/","title":"Module 2: Magento Module Development","text":""},{"location":"modules/module2/#overview","title":"Overview","text":""},{"location":"modules/module2/#objectives","title":"Objectives","text":"<ul> <li>Learn how to create custom modules in Magento 2.</li> <li>Understand module declaration and configuration.</li> <li>Learn about Composer and module dependencies.</li> <li>Get familiar with Dependency Injection (DI) and the Object Manager.</li> </ul>"},{"location":"modules/module2/#21-creating-a-custom-module","title":"2.1 Creating a Custom Module","text":""},{"location":"modules/module2/#study","title":"Study","text":"<ul> <li> <p>Magento Module Structure:</p> </li> <li> <p>Each module resides in <code>app/code/&lt;Vendor&gt;/&lt;Module&gt;/</code>.</p> </li> <li> <p>Key components:</p> <ul> <li><code>registration.php</code>: Registers the module.</li> <li><code>etc/module.xml</code>: Declares the module and its version.</li> <li><code>composer.json</code>: Module dependencies and autoloading.</li> </ul> </li> <li> <p>Module Registration:</p> </li> <li> <p>registration.php:</p> <pre><code>&lt;?php\nuse \\Magento\\Framework\\Component\\ComponentRegistrar;\n\nComponentRegistrar::register(\n    ComponentRegistrar::MODULE,\n    'Vendor_Module',\n    __DIR__\n);\n</code></pre> </li> <li> <p>Module Declaration:</p> </li> <li> <p>module.xml:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;\n    &lt;module name=\"Vendor_Module\" setup_version=\"1.0.0\"&gt;\n        &lt;sequence&gt;\n            &lt;module name=\"Magento_Store\"/&gt;\n        &lt;/sequence&gt;\n    &lt;/module&gt;\n&lt;/config&gt;\n</code></pre> </li> <li> <p>Composer Configuration:</p> </li> <li> <p>composer.json:</p> <pre><code>{\n  \"name\": \"vendor/module\",\n  \"description\": \"Custom Magento 2 module\",\n  \"require\": {\n    \"php\": \"^7.4||^8.1\",\n    \"magento/framework\": \"*\"\n  },\n  \"type\": \"magento2-module\",\n  \"version\": \"1.0.0\",\n  \"license\": [\n    \"OSL-3.0\",\n    \"AFL-3.0\"\n  ],\n  \"autoload\": {\n    \"files\": [\n      \"registration.php\"\n    ],\n    \"psr-4\": {\n      \"Vendor\\\\Module\\\\\": \"\"\n    }\n  }\n}\n</code></pre> </li> </ul>"},{"location":"modules/module2/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Create a custom module named <code>Vendor_HelloWorld</code>.</p>"},{"location":"modules/module2/#steps","title":"Steps:","text":"<ol> <li>Create Module Directory:</li> </ol> <pre><code>mkdir -p app/code/Vendor/HelloWorld\n</code></pre> <ol> <li>Create <code>registration.php</code>:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/registration.php</code></p> <pre><code>&lt;?php\nuse \\Magento\\Framework\\Component\\ComponentRegistrar;\n\nComponentRegistrar::register(\n    ComponentRegistrar::MODULE,\n    'Vendor_HelloWorld',\n    __DIR__\n);\n</code></pre> <ol> <li>Create <code>module.xml</code>:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/module.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;\n    &lt;module name=\"Vendor_HelloWorld\" setup_version=\"1.0.0\"&gt;\n        &lt;sequence&gt;\n            &lt;module name=\"Magento_Store\"/&gt;\n        &lt;/sequence&gt;\n    &lt;/module&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li>Create <code>composer.json</code>:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/composer.json</code></p> <pre><code>{\n  \"name\": \"vendor/helloworld\",\n  \"description\": \"Hello World module for Magento 2\",\n  \"require\": {\n    \"php\": \"^7.4||^8.1\",\n    \"magento/framework\": \"*\"\n  },\n  \"type\": \"magento2-module\",\n  \"version\": \"1.0.0\",\n  \"license\": [\n    \"OSL-3.0\",\n    \"AFL-3.0\"\n  ],\n  \"autoload\": {\n    \"files\": [\n      \"registration.php\"\n    ],\n    \"psr-4\": {\n      \"Vendor\\\\HelloWorld\\\\\": \"\"\n    }\n  }\n}\n</code></pre> <ol> <li>Enable Module and Upgrade:</li> </ol> <pre><code>bin/magento module:enable Vendor_HelloWorld\nbin/magento setup:upgrade\n</code></pre> <ol> <li>Verify Module Status:</li> </ol> <pre><code>bin/magento module:status\n</code></pre> <ul> <li>Ensure <code>Vendor_HelloWorld</code> is enabled.</li> </ul>"},{"location":"modules/module2/#outcome","title":"Outcome","text":"<ul> <li>A basic custom module is created and registered with Magento.</li> <li>Understanding of module structure and registration.</li> </ul>"},{"location":"modules/module2/#22-dependency-injection-and-avoiding-the-object-manager","title":"2.2 Dependency Injection and Avoiding the Object Manager","text":""},{"location":"modules/module2/#study_1","title":"Study","text":"<ul> <li> <p>Dependency Injection (DI):</p> </li> <li> <p>A design pattern where a class requests dependencies from external sources rather than creating them.</p> </li> <li>Promotes loose coupling and easier testing.</li> <li> <p>In Magento, dependencies are injected via constructor.</p> </li> <li> <p>Object Manager:</p> </li> <li> <p>Responsible for instantiating objects in Magento.</p> </li> <li>Direct use is discouraged outside of core framework code.</li> <li> <p>Best practice is to use DI and let the Object Manager resolve dependencies.</p> </li> <li> <p>Defining Dependencies:</p> </li> <li> <p>Declare dependencies in the constructor of your class.</p> </li> <li>Type-hint the class or interface you need.</li> <li>Magento's DI container will automatically inject the required object.</li> </ul>"},{"location":"modules/module2/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Create a simple model that demonstrates dependency injection.</p>"},{"location":"modules/module2/#steps_1","title":"Steps:","text":"<ol> <li>Create a Model Class:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Model/Greeting.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Model;\n\nclass Greeting\n{\n    public function getMessage()\n    {\n        return 'Hello, World!';\n    }\n}\n</code></pre> <ol> <li>Create a Controller That Uses the Model:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Controller/Index/Index.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Controller\\Index;\n\nuse Magento\\Framework\\App\\Action\\Action;\nuse Magento\\Framework\\App\\Action\\Context;\nuse Vendor\\HelloWorld\\Model\\Greeting;\n\nclass Index extends Action\n{\n    protected $greeting;\n\n    public function __construct(\n        Context $context,\n        Greeting $greeting\n    ) {\n        $this-&gt;greeting = $greeting;\n        parent::__construct($context);\n    }\n\n    public function execute()\n    {\n        echo $this-&gt;greeting-&gt;getMessage();\n    }\n}\n</code></pre> <ol> <li>Define Frontend Route:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/frontend/routes.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/etc/routes.xsd\"&gt;\n    &lt;router id=\"standard\"&gt;\n        &lt;route id=\"helloworld\" frontName=\"helloworld\"&gt;\n            &lt;module name=\"Vendor_HelloWorld\"/&gt;\n        &lt;/route&gt;\n    &lt;/router&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li> <p>Access the Controller:</p> </li> <li> <p>Visit <code>http://magento.local/helloworld/index/index</code> in your browser.</p> </li> <li>You should see \"Hello, World!\" displayed.</li> </ol>"},{"location":"modules/module2/#outcome_1","title":"Outcome","text":"<ul> <li>Demonstrated how to use dependency injection in Magento.</li> <li>Avoided direct use of the Object Manager.</li> <li>Improved understanding of best practices in module development.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module3/","title":"Module 3: Working with Database and Models","text":""},{"location":"modules/module3/#overview","title":"Overview","text":""},{"location":"modules/module3/#objectives","title":"Objectives","text":"<ul> <li>Understand Magento's database structure.</li> <li>Learn how to create models, resource models, and collections.</li> <li>Work with the declarative schema to define database tables.</li> <li>Perform CRUD (Create, Read, Update, Delete) operations using models.</li> </ul>"},{"location":"modules/module3/#31-understanding-the-database-structure","title":"3.1 Understanding the Database Structure","text":""},{"location":"modules/module3/#study","title":"Study","text":"<ul> <li> <p>Magento's Database Architecture:</p> </li> <li> <p>Combines Entity-Attribute-Value (EAV) and flat table structures.</p> <ul> <li>EAV Model:</li> <li>Flexible schema for entities like products and categories.</li> <li>Attributes stored in separate tables based on data type.</li> <li>Flat Tables:</li> <li>Denormalized for performance optimization.</li> <li>Used for orders, invoices, etc.</li> </ul> </li> <li> <p>Key Database Components:</p> </li> <li> <p>Models: Represent data entities.</p> </li> <li>Resource Models: Handle database interactions (CRUD operations).</li> <li>Collections: Retrieve multiple records.</li> </ul>"},{"location":"modules/module3/#example","title":"Example","text":"<ul> <li> <p>EAV Tables for Products:</p> </li> <li> <p><code>catalog_product_entity</code></p> </li> <li><code>catalog_product_entity_varchar</code></li> <li><code>catalog_product_entity_int</code></li> <li><code>catalog_product_entity_text</code></li> <li>etc.</li> </ul>"},{"location":"modules/module3/#32-creating-models-and-resource-models","title":"3.2 Creating Models and Resource Models","text":""},{"location":"modules/module3/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Create a custom entity with its own database table using the declarative schema.</p>"},{"location":"modules/module3/#steps","title":"Steps:","text":"<ol> <li>Define the Database Table Using Declarative Schema:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/db_schema.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;schema xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Setup/Declaration/Schema/etc/schema.xsd\"&gt;\n  &lt;table name=\"vendor_helloworld_item\" resource=\"default\" engine=\"innodb\" comment=\"HelloWorld Items\"&gt;\n    &lt;column xsi:type=\"int\" name=\"item_id\" nullable=\"false\" identity=\"true\" unsigned=\"true\" comment=\"Item ID\"/&gt;\n    &lt;column xsi:type=\"varchar\" name=\"title\" nullable=\"false\" length=\"255\" comment=\"Title\"/&gt;\n    &lt;column xsi:type=\"text\" name=\"content\" nullable=\"false\" comment=\"Content\"/&gt;\n    &lt;column xsi:type=\"timestamp\" name=\"created_at\" nullable=\"false\" default=\"CURRENT_TIMESTAMP\" on_update=\"false\" comment=\"Creation Time\"/&gt;\n    &lt;constraint xsi:type=\"primary\" referenceId=\"PRIMARY\"&gt;\n      &lt;column name=\"item_id\"/&gt;\n    &lt;/constraint&gt;\n  &lt;/table&gt;\n&lt;/schema&gt;\n</code></pre> <ol> <li>Create the Model Class:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Model/Item.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Model;\n\nuse Magento\\Framework\\Model\\AbstractModel;\n\nclass Item extends AbstractModel\n{\n    protected function _construct()\n    {\n        $this-&gt;_init(\\Vendor\\HelloWorld\\Model\\ResourceModel\\Item::class);\n    }\n}\n</code></pre> <ol> <li>Create the Resource Model Class:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Model/ResourceModel/Item.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Model\\ResourceModel;\n\nuse Magento\\Framework\\Model\\ResourceModel\\Db\\AbstractDb;\n\nclass Item extends AbstractDb\n{\n    protected function _construct()\n    {\n        $this-&gt;_init('vendor_helloworld_item', 'item_id');\n    }\n}\n</code></pre> <ol> <li>Create the Collection Class:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Model/ResourceModel/Item/Collection.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Model\\ResourceModel\\Item;\n\nuse Magento\\Framework\\Model\\ResourceModel\\Db\\Collection\\AbstractCollection;\n\nclass Collection extends AbstractCollection\n{\n    protected function _construct()\n    {\n        $this-&gt;_init(\n            \\Vendor\\HelloWorld\\Model\\Item::class,\n            \\Vendor\\HelloWorld\\Model\\ResourceModel\\Item::class\n        );\n    }\n}\n</code></pre> <ol> <li>Run the Setup Upgrade:</li> </ol> <pre><code>bin/magento setup:upgrade\n</code></pre> <ol> <li> <p>Test the Model:</p> </li> <li> <p>Create a simple controller or script to perform CRUD operations.</p> </li> </ol> <p>Example Controller: <code>app/code/Vendor/HelloWorld/Controller/Item/Test.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Controller\\Item;\n\nuse Magento\\Framework\\App\\Action\\Action;\nuse Magento\\Framework\\App\\Action\\Context;\nuse Vendor\\HelloWorld\\Model\\ItemFactory;\n\nclass Test extends Action\n{\n    protected $itemFactory;\n\n    public function __construct(\n        Context $context,\n        ItemFactory $itemFactory\n    ) {\n        $this-&gt;itemFactory = $itemFactory;\n        parent::__construct($context);\n    }\n\n    public function execute()\n    {\n        // Create a new item\n        $item = $this-&gt;itemFactory-&gt;create();\n        $item-&gt;setTitle('Test Item');\n        $item-&gt;setContent('This is a test content.');\n        $item-&gt;save();\n\n        // Load the item\n        $loadedItem = $this-&gt;itemFactory-&gt;create()-&gt;load($item-&gt;getId());\n        echo 'Loaded Item Title: ' . $loadedItem-&gt;getTitle();\n\n        // Update the item\n        $loadedItem-&gt;setTitle('Updated Test Item');\n        $loadedItem-&gt;save();\n\n        // Delete the item\n        $loadedItem-&gt;delete();\n\n        echo 'Item operations completed.';\n    }\n}\n</code></pre> <ol> <li> <p>Define the Route for the Controller:</p> </li> <li> <p>Update <code>routes.xml</code> and create appropriate layout and templates if needed.</p> </li> </ol>"},{"location":"modules/module3/#outcome","title":"Outcome","text":"<ul> <li>Created a custom database table using the declarative schema.</li> <li>Implemented model, resource model, and collection classes.</li> <li>Performed CRUD operations using the model.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module4/","title":"Module 4: EAV Model and Attribute Management","text":""},{"location":"modules/module4/#overview","title":"Overview","text":""},{"location":"modules/module4/#objectives","title":"Objectives","text":"<ul> <li>Understand the Entity-Attribute-Value (EAV) model.</li> <li>Learn how to create custom attributes.</li> <li>Manage attribute properties and configurations.</li> <li>Implement custom attribute input types.</li> </ul>"},{"location":"modules/module4/#41-understanding-the-eav-model","title":"4.1 Understanding the EAV Model","text":""},{"location":"modules/module4/#study","title":"Study","text":"<ul> <li> <p>Entity-Attribute-Value (EAV) Model:</p> </li> <li> <p>Designed to handle entities with dynamic and extensible attributes.</p> </li> <li>Data is stored across multiple tables based on data type.</li> <li> <p>Commonly used for products, categories, customers.</p> </li> <li> <p>EAV Structure:</p> </li> <li> <p>Entity Table: Contains entity identifiers.</p> </li> <li>Attribute Tables: Define attribute metadata.</li> <li> <p>Value Tables: Store attribute values (<code>_int</code>, <code>_varchar</code>, <code>_text</code>, etc.).</p> </li> <li> <p>Advantages:</p> </li> <li> <p>Flexibility to add new attributes without altering the schema.</p> </li> <li> <p>Supports multiple attribute types and complex data structures.</p> </li> <li> <p>Disadvantages:</p> </li> <li> <p>Can impact performance due to complex queries.</p> </li> <li>Joins across multiple tables can be resource-intensive.</li> </ul>"},{"location":"modules/module4/#example","title":"Example","text":"<ul> <li> <p>Product Attributes:</p> </li> <li> <p>Adding a new attribute like 'Brand' or 'Manufacturer' can be done without changing the core database schema.</p> </li> </ul>"},{"location":"modules/module4/#42-creating-custom-product-attributes","title":"4.2 Creating Custom Product Attributes","text":""},{"location":"modules/module4/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Add a custom product attribute programmatically using a Data Patch.</p>"},{"location":"modules/module4/#steps","title":"Steps:","text":"<ol> <li>Create a Data Patch:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Setup/Patch/Data/AddCustomProductAttribute.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Setup\\Patch\\Data;\n\nuse Magento\\Framework\\Setup\\ModuleDataSetupInterface;\nuse Magento\\Framework\\Setup\\Patch\\DataPatchInterface;\nuse Magento\\Eav\\Setup\\EavSetupFactory;\n\nclass AddCustomProductAttribute implements DataPatchInterface\n{\n    private $moduleDataSetup;\n    private $eavSetupFactory;\n\n    public function __construct(\n        ModuleDataSetupInterface $moduleDataSetup,\n        EavSetupFactory $eavSetupFactory\n    ) {\n        $this-&gt;moduleDataSetup = $moduleDataSetup;\n        $this-&gt;eavSetupFactory = $eavSetupFactory;\n    }\n\n    public function apply()\n    {\n        $eavSetup = $this-&gt;eavSetupFactory-&gt;create(['setup' =&gt; $this-&gt;moduleDataSetup]);\n\n        $eavSetup-&gt;addAttribute(\n            \\Magento\\Catalog\\Model\\Product::ENTITY,\n            'custom_attribute_code',\n            [\n                'type' =&gt; 'varchar',\n                'label' =&gt; 'Custom Attribute',\n                'input' =&gt; 'text',\n                'frontend' =&gt; '',\n                'backend' =&gt; '',\n                'required' =&gt; false,\n                'user_defined' =&gt; true,\n                'searchable' =&gt; true,\n                'filterable' =&gt; true,\n                'comparable' =&gt; true,\n                'visible_on_front' =&gt; true,\n                'used_in_product_listing' =&gt; true,\n                'unique' =&gt; false,\n                'apply_to' =&gt; '',\n                'global' =&gt; \\Magento\\Eav\\Model\\Entity\\Attribute\\ScopedAttributeInterface::SCOPE_GLOBAL,\n            ]\n        );\n    }\n\n    public static function getDependencies()\n    {\n        return [];\n    }\n\n    public function getAliases()\n    {\n        return [];\n    }\n}\n</code></pre> <ol> <li>Run the Data Patch:</li> </ol> <pre><code>bin/magento setup:upgrade\n</code></pre> <ol> <li> <p>Verify the Attribute:</p> </li> <li> <p>In the Magento Admin, navigate to Stores &gt; Attributes &gt; Product.</p> </li> <li> <p>Search for 'Custom Attribute'.</p> </li> <li> <p>Assign the Attribute to an Attribute Set:</p> </li> <li> <p>Go to Stores &gt; Attributes &gt; Attribute Set.</p> </li> <li>Edit an attribute set (e.g., Default).</li> <li> <p>Drag and drop the new attribute into a group.</p> </li> <li> <p>Use the Attribute:</p> </li> <li> <p>Edit a product and set a value for the new attribute.</p> </li> <li>Save the product and verify that the attribute value is stored.</li> </ol>"},{"location":"modules/module4/#outcome","title":"Outcome","text":"<ul> <li>Successfully added a custom product attribute programmatically.</li> <li>Gained understanding of how EAV works in Magento.</li> <li>Learned how to manage attributes and attribute sets.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module5/","title":"Module 5: Frontend Development and Theming","text":"<p>(Due to the length of the content, I'll provide up to Module 5 here. Please let me know if you'd like me to continue with the remaining modules.)</p>"},{"location":"modules/module5/#module-5-frontend-development-and-theming_1","title":"Module 5: Frontend Development and Theming","text":""},{"location":"modules/module5/#overview","title":"Overview","text":""},{"location":"modules/module5/#objectives","title":"Objectives","text":"<ul> <li>Understand Magento 2 theme structure and hierarchy.</li> <li>Learn how to create a custom theme.</li> <li>Customize layouts, templates, and static files.</li> <li>Override parent theme styles using LESS.</li> </ul>"},{"location":"modules/module5/#51-creating-a-custom-theme","title":"5.1 Creating a Custom Theme","text":""},{"location":"modules/module5/#study","title":"Study","text":"<ul> <li> <p>Magento Theme Structure:</p> </li> <li> <p>Themes are located in <code>app/design/frontend/&lt;Vendor&gt;/&lt;theme&gt;/</code>.</p> </li> <li> <p>Key components:</p> <ul> <li><code>theme.xml</code>: Theme declaration.</li> <li><code>registration.php</code>: Registers the theme.</li> <li><code>etc/view.xml</code>: Configuration for images and other view-related settings.</li> <li><code>web/</code>: Contains static assets (CSS, JavaScript, images).</li> </ul> </li> <li> <p>Theme Hierarchy and Inheritance:</p> </li> <li> <p>Child themes inherit from parent themes.</p> </li> <li>Allows for reusing and overriding existing styles and templates.</li> </ul>"},{"location":"modules/module5/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Create a custom theme that extends Magento Blank theme.</p>"},{"location":"modules/module5/#steps","title":"Steps:","text":"<ol> <li>Create Theme Directory:</li> </ol> <pre><code>mkdir -p app/design/frontend/Vendor/custom_theme\n</code></pre> <ol> <li>Create <code>theme.xml</code>:</li> </ol> <p>File: <code>app/design/frontend/Vendor/custom_theme/theme.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;theme xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/theme.xsd\"&gt;\n  &lt;title&gt;Vendor Custom Theme&lt;/title&gt;\n  &lt;parent&gt;Magento/blank&lt;/parent&gt;\n&lt;/theme&gt;\n</code></pre> <ol> <li>Create <code>registration.php</code>:</li> </ol> <p>File: <code>app/design/frontend/Vendor/custom_theme/registration.php</code></p> <pre><code>&lt;?php\nuse \\Magento\\Framework\\Component\\ComponentRegistrar;\n\nComponentRegistrar::register(\n    ComponentRegistrar::THEME,\n    'frontend/Vendor/custom_theme',\n    __DIR__\n);\n</code></pre> <ol> <li> <p>Apply the Theme:</p> </li> <li> <p>In the Magento Admin, navigate to Content &gt; Design &gt; Configuration.</p> </li> <li>Edit the default store view.</li> <li>Set Applied Theme to 'Vendor Custom Theme'.</li> <li> <p>Flush the cache:</p> <pre><code>bin/magento cache:flush\n</code></pre> </li> <li> <p>Customize the Theme:</p> </li> <li> <p>Override Templates:</p> <ul> <li>Copy template files from <code>vendor/magento/module-catalog/view/frontend/templates/</code> to <code>app/design/frontend/Vendor/custom_theme/Magento_Catalog/templates/</code>.</li> </ul> </li> <li> <p>Modify Layouts:</p> <ul> <li>Create layout override files in <code>app/design/frontend/Vendor/custom_theme/Magento_Catalog/layout/</code>.</li> </ul> </li> <li> <p>Add Static Files:</p> <ul> <li>Place CSS and JavaScript files in <code>app/design/frontend/Vendor/custom_theme/web/css/</code> and <code>web/js/</code> respectively.</li> </ul> </li> </ol>"},{"location":"modules/module5/#outcome","title":"Outcome","text":"<ul> <li>Created and applied a custom theme.</li> <li>Understood theme inheritance and customization.</li> </ul>"},{"location":"modules/module5/#52-overriding-parent-theme-styles-with-less","title":"5.2 Overriding Parent Theme Styles with LESS","text":""},{"location":"modules/module5/#study_1","title":"Study","text":"<ul> <li> <p>LESS in Magento:</p> </li> <li> <p>Magento uses LESS preprocessor for styles.</p> </li> <li> <p>Allows variables, mixins, and nesting.</p> </li> <li> <p>Overriding Styles:</p> </li> <li> <p>Use <code>_extend.less</code> or <code>_theme.less</code> to override parent styles.</p> </li> <li>Place these files in <code>web/css/source/</code> directory of your theme.</li> </ul>"},{"location":"modules/module5/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Change the background color of the header.</p>"},{"location":"modules/module5/#steps_1","title":"Steps:","text":"<ol> <li>Create the Directory:</li> </ol> <pre><code>mkdir -p app/design/frontend/Vendor/custom_theme/web/css/source\n</code></pre> <ol> <li>Create <code>_theme.less</code>:</li> </ol> <p>File: <code>app/design/frontend/Vendor/custom_theme/web/css/source/_theme.less</code></p> <pre><code>@primary__color: #FF6600;\n\n.page-header {\n  background-color: @primary__color;\n}\n</code></pre> <ol> <li>Deploy Static Content:</li> </ol> <pre><code>bin/magento setup:static-content:deploy\n</code></pre> <ul> <li> <p>For developer mode, you may need to clear static files:</p> <pre><code>rm -rf pub/static/frontend/*\nrm -rf var/view_preprocessed/*\n</code></pre> </li> <li> <p>Verify Changes:</p> </li> <li> <p>Refresh the frontend and confirm the header background color has changed.</p> </li> </ul>"},{"location":"modules/module5/#outcome_1","title":"Outcome","text":"<ul> <li>Successfully overridden parent theme styles using LESS.</li> <li>Gained understanding of Magento's frontend styling mechanisms.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module6/","title":"Module 6: JavaScript Customizations","text":""},{"location":"modules/module6/#overview","title":"Overview","text":""},{"location":"modules/module6/#objectives","title":"Objectives","text":"<ul> <li>Understand Magento's JavaScript framework and RequireJS.</li> <li>Learn how to create and customize JavaScript modules.</li> <li>Implement custom widgets and extend existing ones.</li> <li>Learn how to translate strings in JavaScript.</li> </ul>"},{"location":"modules/module6/#61-working-with-requirejs-and-javascript-modules","title":"6.1 Working with RequireJS and JavaScript Modules","text":""},{"location":"modules/module6/#study","title":"Study","text":"<ul> <li> <p>Magento's Use of RequireJS:</p> </li> <li> <p>Magento 2 uses RequireJS for asynchronous JavaScript module loading.</p> </li> <li>Organizes JavaScript code into modules for better maintainability.</li> <li> <p>Defines dependencies explicitly.</p> </li> <li> <p>Defining JavaScript Modules:</p> </li> <li> <p>Modules are defined using <code>define</code> function.</p> </li> <li> <p>Syntax:</p> <pre><code>define(['dependency1', 'dependency2'], function (dep1, dep2) {\n  // Module code\n  return function () {\n    // Return a function or object\n  };\n});\n</code></pre> </li> <li> <p>Requiring Modules:</p> </li> <li> <p>Use <code>require</code> to load modules:</p> <pre><code>require(['module_name'], function (module) {\n  // Use the module\n});\n</code></pre> </li> <li> <p>Configuration with <code>requirejs-config.js</code>:</p> </li> <li> <p>Located in <code>view/frontend/requirejs-config.js</code>.</p> </li> <li>Used to map module aliases and paths.</li> </ul>"},{"location":"modules/module6/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Create a custom JavaScript module and load it on a specific page.</p>"},{"location":"modules/module6/#steps","title":"Steps:","text":"<ol> <li>Create the JavaScript Module:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/view/frontend/web/js/custom-module.js</code></p> <pre><code>define(['jquery'], function ($) {\n  'use strict';\n  return function (config, element) {\n    $(element).text('Hello from Custom Module!');\n  };\n});\n</code></pre> <ol> <li>Update <code>requirejs-config.js</code>:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/view/frontend/requirejs-config.js</code></p> <pre><code>var config = {\n  map: {\n    '*': {\n      customModule: 'Vendor_HelloWorld/js/custom-module'\n    }\n  }\n};\n</code></pre> <ol> <li>Add the Module to a Layout:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/view/frontend/layout/helloworld_index_index.xml</code></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;\n  &lt;body&gt;\n    &lt;referenceContainer name=\"content\"&gt;\n      &lt;block class=\"Magento\\Framework\\View\\Element\\Template\" name=\"custom_block\" template=\"Vendor_HelloWorld::custom.phtml\"&gt;\n        &lt;arguments&gt;\n          &lt;argument name=\"jsLayout\" xsi:type=\"array\"&gt;\n            &lt;item name=\"components\" xsi:type=\"array\"&gt;\n              &lt;item name=\"customComponent\" xsi:type=\"array\"&gt;\n                &lt;item name=\"component\" xsi:type=\"string\"&gt;Vendor_HelloWorld/js/custom-module&lt;/item&gt;\n              &lt;/item&gt;\n            &lt;/item&gt;\n          &lt;/argument&gt;\n        &lt;/arguments&gt;\n      &lt;/block&gt;\n    &lt;/referenceContainer&gt;\n  &lt;/body&gt;\n&lt;/page&gt;\n</code></pre> <ol> <li>Create the Template File:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/view/frontend/templates/custom.phtml</code></p> <pre><code>&lt;div data-bind=\"scope: 'customComponent'\"&gt;\n  &lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;\n&lt;/div&gt;\n</code></pre> <ol> <li> <p>Verify on Frontend:</p> </li> <li> <p>Navigate to the <code>helloworld</code> page.</p> </li> <li>The text \"Hello from Custom Module!\" should display.</li> </ol>"},{"location":"modules/module6/#outcome","title":"Outcome","text":"<ul> <li>Learned how to create and configure custom JavaScript modules.</li> <li>Implemented RequireJS configuration and module loading.</li> </ul>"},{"location":"modules/module6/#62-extending-and-overriding-javascript-components","title":"6.2 Extending and Overriding JavaScript Components","text":""},{"location":"modules/module6/#study_1","title":"Study","text":"<ul> <li> <p>Magento UI Components:</p> </li> <li> <p>JavaScript components used for dynamic UI elements.</p> </li> <li> <p>Configured via JSON configurations in layouts or templates.</p> </li> <li> <p>Extending Components:</p> </li> <li> <p>Use mixins to extend existing components.</p> </li> <li> <p>Configure mixins in <code>requirejs-config.js</code>.</p> </li> <li> <p>Creating Mixins:</p> </li> <li> <p>Introduce new behavior without modifying the original module.</p> </li> </ul>"},{"location":"modules/module6/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Extend the Magento validation component to add a custom validation rule.</p>"},{"location":"modules/module6/#steps_1","title":"Steps:","text":"<ol> <li>Create the Mixin Module:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/view/frontend/web/js/validation-mixin.js</code></p> <pre><code>define(['jquery'], function ($) {\n  'use strict';\n\n  return function (originalValidation) {\n    $.validator.addMethod(\n      'custom-rule',\n      function (value, element) {\n        return value === 'custom';\n      },\n      $.mage.__('Please enter \"custom\"')\n    );\n    return originalValidation;\n  };\n});\n</code></pre> <ol> <li>Update <code>requirejs-config.js</code>:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/view/frontend/requirejs-config.js</code></p> <pre><code>var config = {\n  config: {\n    mixins: {\n      'mage/validation': {\n        'Vendor_HelloWorld/js/validation-mixin': true\n      }\n    }\n  }\n};\n</code></pre> <ol> <li> <p>Use the Custom Rule in a Form:</p> </li> <li> <p>Add <code>data-validate=\"{required:true, 'custom-rule':true}\"</code> to an input field in a template.</p> </li> <li> <p>Test the Validation:</p> </li> <li> <p>Try submitting the form with different input values to see the validation in action.</p> </li> </ol>"},{"location":"modules/module6/#outcome_1","title":"Outcome","text":"<ul> <li>Learned how to extend JavaScript components using mixins.</li> <li>Implemented a custom validation rule.</li> </ul>"},{"location":"modules/module6/#63-translating-strings-in-javascript","title":"6.3 Translating Strings in JavaScript","text":""},{"location":"modules/module6/#study_2","title":"Study","text":"<ul> <li> <p>Magento's Translation Mechanism:</p> </li> <li> <p>Uses <code>mage/translate</code> library.</p> </li> <li> <p>Translations are defined in CSV files under <code>i18n</code> directory.</p> </li> <li> <p>Translating Strings:</p> </li> <li> <p>Use <code>$.mage.__('Your string here')</code> in JavaScript code.</p> </li> </ul>"},{"location":"modules/module6/#practical-exercise_2","title":"Practical Exercise","text":"<p>Task: Implement translation for strings in a JavaScript module.</p>"},{"location":"modules/module6/#steps_2","title":"Steps:","text":"<ol> <li>Modify the JavaScript Module:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/view/frontend/web/js/custom-module.js</code></p> <pre><code>define(['jquery', 'mage/translate'], function ($, $t) {\n  'use strict';\n  return function (config, element) {\n    $(element).text($t('Hello from Custom Module!'));\n  };\n});\n</code></pre> <ol> <li>Create Translation File:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/i18n/en_US.csv</code></p> <pre><code>\"Hello from Custom Module!\",\"Hello from Custom Module!\"\n</code></pre> <p>File: <code>app/code/Vendor/HelloWorld/i18n/fr_FR.csv</code></p> <pre><code>\"Hello from Custom Module!\",\"Bonjour du Module Personnalis\u00e9!\"\n</code></pre> <ol> <li> <p>Test the Translation:</p> </li> <li> <p>Switch the store view to French.</p> </li> <li>Verify that the text changes accordingly.</li> </ol>"},{"location":"modules/module6/#outcome_2","title":"Outcome","text":"<ul> <li>Learned how to implement translations in JavaScript.</li> <li>Understood the use of <code>mage/translate</code> for localization.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module7/","title":"Module 7: Routing and Controllers","text":""},{"location":"modules/module7/#overview","title":"Overview","text":""},{"location":"modules/module7/#objectives","title":"Objectives","text":"<ul> <li>Understand Magento's routing mechanism.</li> <li>Learn how to create frontend and admin controllers.</li> <li>Implement custom URL routes.</li> <li>Forward and redirect requests within controllers.</li> </ul>"},{"location":"modules/module7/#71-understanding-routing-in-magento","title":"7.1 Understanding Routing in Magento","text":""},{"location":"modules/module7/#study","title":"Study","text":"<ul> <li> <p>Routing Configuration:</p> </li> <li> <p>Defined in <code>routes.xml</code>.</p> </li> <li> <p>Maps incoming URLs to modules and controllers.</p> </li> <li> <p>Route Structure:</p> </li> <li> <p>Area: <code>frontend</code> or <code>adminhtml</code>.</p> </li> <li>Router ID: Identifies the router (<code>standard</code>, <code>admin</code>).</li> <li> <p>Route ID and Front Name:</p> <pre><code>&lt;route id=\"helloworld\" frontName=\"helloworld\"&gt;\n  &lt;module name=\"Vendor_HelloWorld\"/&gt;\n&lt;/route&gt;\n</code></pre> </li> </ul>"},{"location":"modules/module7/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Create a custom frontend route and controller.</p>"},{"location":"modules/module7/#steps","title":"Steps:","text":"<ol> <li>Define the Route:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/frontend/routes.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/etc/routes.xsd\"&gt;\n  &lt;router id=\"standard\"&gt;\n    &lt;route id=\"helloworld\" frontName=\"helloworld\"&gt;\n      &lt;module name=\"Vendor_HelloWorld\"/&gt;\n    &lt;/route&gt;\n  &lt;/router&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li>Create the Controller Action:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Controller/Index/Forward.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Controller\\Index;\n\nuse Magento\\Framework\\App\\Action\\Action;\nuse Magento\\Framework\\App\\Action\\Context;\n\nclass Forward extends Action\n{\n    public function execute()\n    {\n        $this-&gt;_forward('index');\n    }\n}\n</code></pre> <ol> <li> <p>Access the Controller:</p> </li> <li> <p>Visit <code>http://magento.local/helloworld/index/forward</code>.</p> </li> <li>It should forward to <code>index</code> action.</li> </ol>"},{"location":"modules/module7/#outcome","title":"Outcome","text":"<ul> <li>Learned how to configure routes and create controllers.</li> <li>Implemented request forwarding within a controller.</li> </ul>"},{"location":"modules/module7/#72-creating-admin-controllers-and-acl","title":"7.2 Creating Admin Controllers and ACL","text":""},{"location":"modules/module7/#study_1","title":"Study","text":"<ul> <li> <p>Admin Routing:</p> </li> <li> <p>Defined in <code>etc/adminhtml/routes.xml</code>.</p> </li> <li> <p>Uses a different router ID (<code>admin</code>).</p> </li> <li> <p>Access Control Lists (ACL):</p> </li> <li> <p>Defined in <code>etc/acl.xml</code>.</p> </li> <li>Controls access to admin controllers and resources.</li> </ul>"},{"location":"modules/module7/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Create an admin controller with proper ACL configuration.</p>"},{"location":"modules/module7/#steps_1","title":"Steps:","text":"<ol> <li>Define the Admin Route:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/adminhtml/routes.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/etc/routes.xsd\"&gt;\n  &lt;router id=\"admin\"&gt;\n    &lt;route id=\"helloworld\" frontName=\"helloworld\"&gt;\n      &lt;module name=\"Vendor_HelloWorld\"/&gt;\n    &lt;/route&gt;\n  &lt;/router&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li>Create the Admin Controller:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Controller/Adminhtml/Index/Index.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Controller\\Adminhtml\\Index;\n\nuse Magento\\Backend\\App\\Action;\nuse Magento\\Backend\\App\\Action\\Context;\nuse Magento\\Framework\\View\\Result\\PageFactory;\n\nclass Index extends Action\n{\n    const ADMIN_RESOURCE = 'Vendor_HelloWorld::helloworld';\n\n    protected $resultPageFactory;\n\n    public function __construct(\n        Context $context,\n        PageFactory $resultPageFactory\n    ) {\n        $this-&gt;resultPageFactory = $resultPageFactory;\n        parent::__construct($context);\n    }\n\n    public function execute()\n    {\n        return $this-&gt;resultPageFactory-&gt;create();\n    }\n}\n</code></pre> <ol> <li>Define ACL Resources:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/acl.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;acl xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Acl/etc/acl.xsd\"&gt;\n  &lt;resources&gt;\n    &lt;resource id=\"Magento_Backend::admin\"&gt;\n      &lt;resource id=\"Vendor_HelloWorld::helloworld\" title=\"HelloWorld Module\" /&gt;\n    &lt;/resource&gt;\n  &lt;/resources&gt;\n&lt;/acl&gt;\n</code></pre> <ol> <li>Add Menu Item:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/adminhtml/menu.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Menu/etc/menu.xsd\"&gt;\n  &lt;menu&gt;\n    &lt;add id=\"Vendor_HelloWorld::helloworld\" title=\"HelloWorld\" module=\"Vendor_HelloWorld\"\n         sortOrder=\"100\" parent=\"Magento_Backend::content\" action=\"helloworld/index/index\" resource=\"Vendor_HelloWorld::helloworld\"/&gt;\n  &lt;/menu&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li> <p>Access the Admin Page:</p> </li> <li> <p>Log in to the admin panel.</p> </li> <li>Navigate to Content &gt; HelloWorld.</li> </ol>"},{"location":"modules/module7/#outcome_1","title":"Outcome","text":"<ul> <li>Learned how to create admin controllers with ACL.</li> <li>Secured admin routes and controlled access permissions.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module8/","title":"Module 8: Plugins and Dependency Injection","text":""},{"location":"modules/module8/#overview","title":"Overview","text":""},{"location":"modules/module8/#objectives","title":"Objectives","text":"<ul> <li>Understand how to use plugins (interceptors) to modify behavior.</li> <li>Learn about Dependency Injection (DI) in Magento.</li> <li>Configure di.xml for object preferences and plugins.</li> <li>Best practices for using plugins and dependency injection.</li> </ul>"},{"location":"modules/module8/#81-using-plugins-to-extend-functionality","title":"8.1 Using Plugins to Extend Functionality","text":""},{"location":"modules/module8/#study","title":"Study","text":"<ul> <li> <p>What Are Plugins?</p> </li> <li> <p>Also known as interceptors.</p> </li> <li>Allows modifying the behavior of public methods in classes.</li> <li> <p>Types of plugin methods:</p> <ul> <li><code>before</code>: Executes before the original method.</li> <li><code>after</code>: Executes after the original method.</li> <li><code>around</code>: Wraps around the original method.</li> </ul> </li> <li> <p>When to Use Plugins vs. Observers:</p> </li> <li> <p>Use plugins to modify specific methods.</p> </li> <li>Use observers to respond to events.</li> </ul>"},{"location":"modules/module8/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Create a plugin to modify the <code>getName()</code> method of the <code>Product</code> model.</p>"},{"location":"modules/module8/#steps","title":"Steps:","text":"<ol> <li>Create the Plugin Class:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Plugin/ProductPlugin.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Plugin;\n\nclass ProductPlugin\n{\n    public function afterGetName(\\Magento\\Catalog\\Model\\Product $subject, $result)\n    {\n        return $result . ' - Customized';\n    }\n}\n</code></pre> <ol> <li>Configure the Plugin in di.xml:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/di.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n  &lt;type name=\"Magento\\Catalog\\Model\\Product\"&gt;\n    &lt;plugin name=\"product_name_plugin\" type=\"Vendor\\HelloWorld\\Plugin\\ProductPlugin\"/&gt;\n  &lt;/type&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li> <p>Test the Plugin:</p> </li> <li> <p>View a product page.</p> </li> <li>The product name should display with ' - Customized' appended.</li> </ol>"},{"location":"modules/module8/#outcome","title":"Outcome","text":"<ul> <li>Learned how to create and configure plugins.</li> <li>Modified the behavior of a core class method.</li> </ul>"},{"location":"modules/module8/#82-understanding-dependency-injection","title":"8.2 Understanding Dependency Injection","text":""},{"location":"modules/module8/#study_1","title":"Study","text":"<ul> <li> <p>Dependency Injection (DI):</p> </li> <li> <p>Design pattern for supplying dependencies to classes.</p> </li> <li>Promotes loose coupling and testability.</li> <li> <p>In Magento, implemented via constructor injection.</p> </li> <li> <p>Object Manager:</p> </li> <li> <p>Responsible for instantiating classes and resolving dependencies.</p> </li> <li> <p>Should not be used directly in custom code.</p> </li> <li> <p>Defining Preferences:</p> </li> <li> <p>Use <code>di.xml</code> to set a preference (replacement) for a class or interface.</p> </li> </ul>"},{"location":"modules/module8/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Override a core class by setting a preference.</p>"},{"location":"modules/module8/#steps_1","title":"Steps:","text":"<ol> <li>Create the Class:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Model/CustomProduct.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Model;\n\nclass CustomProduct extends \\Magento\\Catalog\\Model\\Product\n{\n    public function getName()\n    {\n        return parent::getName() . ' - From Custom Product';\n    }\n}\n</code></pre> <ol> <li>Set the Preference:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/di.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;\n  &lt; preference for=\"Magento\\Catalog\\Model\\Product\" type=\"Vendor\\HelloWorld\\Model\\CustomProduct\"/&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li> <p>Test the Change:</p> </li> <li> <p>Refresh the frontend product page.</p> </li> <li>The product name should reflect the change.</li> </ol>"},{"location":"modules/module8/#outcome_1","title":"Outcome","text":"<ul> <li>Learned how to use dependency injection to override classes.</li> <li>Understood the importance of DI in Magento's architecture.</li> </ul> <p>Next Module &gt;&gt;</p>"},{"location":"modules/module9/","title":"Module 9: Working with Cron Jobs","text":""},{"location":"modules/module9/#overview","title":"Overview","text":""},{"location":"modules/module9/#objectives","title":"Objectives","text":"<ul> <li>Understand how Magento's cron jobs work.</li> <li>Learn how to schedule custom cron jobs.</li> <li>Share configurations among cron jobs using groups.</li> <li>Best practices for cron job implementation.</li> </ul>"},{"location":"modules/module9/#91-scheduling-custom-cron-jobs","title":"9.1 Scheduling Custom Cron Jobs","text":""},{"location":"modules/module9/#study","title":"Study","text":"<ul> <li> <p>Cron Configuration Files:</p> </li> <li> <p>Defined in <code>crontab.xml</code> within <code>etc</code> directory.</p> </li> <li> <p>Schedules tasks to be executed at specified times.</p> </li> <li> <p>Cron Job Elements:</p> </li> <li> <p><code>job</code>: Defines the cron job.</p> </li> <li><code>schedule</code>: Specifies when the job runs using cron syntax.</li> <li><code>group</code>: Optional, allows grouping of jobs.</li> </ul>"},{"location":"modules/module9/#practical-exercise","title":"Practical Exercise","text":"<p>Task: Create a cron job that logs a message every hour.</p>"},{"location":"modules/module9/#steps","title":"Steps:","text":"<ol> <li>Define the Cron Job:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/crontab.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Cron:etc/crontab.xsd\"&gt;\n  &lt;group id=\"default\"&gt;\n    &lt;job name=\"vendor_helloworld_cron\" instance=\"Vendor\\HelloWorld\\Cron\\MyCron\" method=\"execute\"&gt;\n      &lt;schedule&gt;0 * * * *&lt;/schedule&gt;\n    &lt;/job&gt;\n  &lt;/group&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li>Create the Cron Class:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/Cron/MyCron.php</code></p> <pre><code>&lt;?php\nnamespace Vendor\\HelloWorld\\Cron;\n\nuse Psr\\Log\\LoggerInterface;\n\nclass MyCron\n{\n    protected $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this-&gt;logger = $logger;\n    }\n\n    public function execute()\n    {\n        $this-&gt;logger-&gt;info('Vendor_HelloWorld cron job executed.');\n        return $this;\n    }\n}\n</code></pre> <ol> <li> <p>Verify Cron Job Execution:</p> </li> <li> <p>Ensure Magento's cron is set up on your system.</p> </li> <li>Check the logs in <code>var/log/system.log</code> or <code>var/log/cron.log</code>.</li> </ol>"},{"location":"modules/module9/#outcome","title":"Outcome","text":"<ul> <li>Learned how to schedule custom cron jobs.</li> <li>Implemented logging within a cron job.</li> </ul>"},{"location":"modules/module9/#92-using-cron-groups","title":"9.2 Using Cron Groups","text":""},{"location":"modules/module9/#study_1","title":"Study","text":"<ul> <li> <p>Cron Groups:</p> </li> <li> <p>Allows grouping of cron jobs.</p> </li> <li>Each group can have different settings (e.g., timeouts).</li> <li> <p>Defined in <code>cron_groups.xml</code>.</p> </li> <li> <p>Default Groups:</p> </li> <li> <p><code>default</code>, <code>index</code>, <code>analytics</code>.</p> </li> </ul>"},{"location":"modules/module9/#practical-exercise_1","title":"Practical Exercise","text":"<p>Task: Create a custom cron group and assign a job to it.</p>"},{"location":"modules/module9/#steps_1","title":"Steps:","text":"<ol> <li>Define the Cron Group:</li> </ol> <p>File: <code>app/code/Vendor/HelloWorld/etc/cron_groups.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Cron:etc/cron_groups.xsd\"&gt;\n  &lt;group id=\"custom_group\"&gt;\n    &lt;schedule_generate_every&gt;1&lt;/schedule_generate_every&gt;\n    &lt;schedule_ahead_for&gt;60&lt;/schedule_ahead_for&gt;\n    &lt;schedule_lifetime&gt;60&lt;/schedule_lifetime&gt;\n    &lt;history_cleanup_every&gt;10&lt;/history_cleanup_every&gt;\n    &lt;history_success_lifetime&gt;60&lt;/history_success_lifetime&gt;\n    &lt;history_failure_lifetime&gt;600&lt;/history_failure_lifetime&gt;\n    &lt;use_separate_process&gt;true&lt;/use_separate_process&gt;\n  &lt;/group&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li>Assign Job to the Group:</li> </ol> <p>Modify <code>crontab.xml</code>:</p> <p>File: <code>app/code/Vendor/HelloWorld/etc/crontab.xml</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Cron:etc/crontab.xsd\"&gt;\n  &lt;group id=\"custom_group\"&gt;\n    &lt;job name=\"vendor_helloworld_cron_custom\" instance=\"Vendor\\HelloWorld\\Cron\\MyCron\" method=\"execute\"&gt;\n      &lt;schedule&gt;*/5 * * * *&lt;/schedule&gt;\n    &lt;/job&gt;\n  &lt;/group&gt;\n&lt;/config&gt;\n</code></pre> <ol> <li> <p>Verify Cron Job Execution:</p> </li> <li> <p>Ensure the cron for <code>custom_group</code> is running.</p> </li> <li>Check logs to confirm execution.</li> </ol>"},{"location":"modules/module9/#outcome_1","title":"Outcome","text":"<ul> <li>Learned how to create and use cron groups.</li> <li>Managed cron job configurations effectively.</li> </ul> <p>Next Module &gt;&gt;</p>"}]}